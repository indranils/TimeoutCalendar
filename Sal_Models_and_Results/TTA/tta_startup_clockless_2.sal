%
% Simplified TTA startup protocol
% - Does not model failures
% - Assumes a simple reliable hub
% - Includes timing
%

tta_startup_clockless_2: CONTEXT =

BEGIN

  N: NATURAL = 7;

  % Ugly type definition to work around ICS's limitations
  % (incompleteness when dealing with integers)

  %IDENTITY: TYPE = { x: [1 .. N] | x=1 OR x=2 OR x=3 OR x=4 OR x=5 OR 
  %                                 x=6 OR x=7 OR x=8 OR x=9 OR x=10 };

  IDENTITY: TYPE = [1 .. N];

  %---------------------------------------------------
  %  Delays, assuming all slots have the same length
  %---------------------------------------------------

  slot_time: NATURAL = 3;

  round_time: NATURAL = slot_time * N;

  % propagation delay  (must be smaller than half the slot time)

  %propagation: { x : NATURAL | 0 < x AND x < slot_time/2 };
  propagation: NATURAL = 1;

  % maximal time in init state

  max_init_time: NATURAL = N + 1;


  TIMEOUT_VALUE: TYPE = [0 .. 3 * round_time] ;

  TIMEOUT_ARRAY: TYPE = ARRAY IDENTITY OF TIMEOUT_VALUE;


  % timeouts in listen and coldstart states    

  tau_startup(i: IDENTITY): NATURAL = slot_time * (i - 1);

  tau_listen(i: IDENTITY): NATURAL = 2 * round_time + tau_startup(i);

%  tau_listen(i: IDENTITY): NATURAL = 2 * round_time;

  tau_coldstart(i: IDENTITY): NATURAL = round_time + tau_startup(i);




  %--------------------------------------------
  %  Hub/communication channel model
  %--------------------------------------------

  message: TYPE = { cs_frame, i_frame };  

  calendar: TYPE = 
    [# flag: ARRAY IDENTITY OF bool,  % which nodes have to receive the message
       content: message,              % message
       origin: IDENTITY,              % sender
       delivery: {x: NATURAL  | 0 <= x AND x < slot_time}               % reception time (the same for all recipients)
     #];


  %---------------------------
  %  Operations on calendars
  %--------------------------- 

  %---------------------------------------------------------------
  % empty calendar: content, origin, and delivery are irrelevant
  %---------------------------------------------------------------

  empty_cal: calendar = (# flag := [[i: IDENTITY] FALSE],
                           content := i_frame,
                           origin := 1,
                           delivery := 0 #);

  empty?(cal: calendar): bool = FORALL (i: IDENTITY): NOT cal.flag[i];

  %cal: calendar = empty_cal;


  %----------------------------------------
  % Check for pending events and messages
  %----------------------------------------

  event_pending?(cal: calendar, i: IDENTITY): bool = cal.flag[i];

  i_frame_pending?(cal: calendar, i: IDENTITY): bool = 
     cal.flag[i] AND cal.content = i_frame;

  cs_frame_pending?(cal: calendar, i: IDENTITY): bool =
     cal.flag[i] AND cal.content = cs_frame;

  cs_frame?(cal: calendar): bool = 
     NOT empty?(cal) AND cal.content = cs_frame;

  i_frame?(cal: calendar): bool =
     NOT empty?(cal) AND cal.content = i_frame;


  %---------------------------------------------------------
  % occurrence time and origin of the pending events
  % both are meaningful only if the calendar is not empty
  %---------------------------------------------------------

  event_time(cal: calendar, i: IDENTITY): NATURAL = cal.delivery; 

  frame_origin(cal: calendar, i: IDENTITY): IDENTITY = cal.origin;
  

  %-----------------------------
  % remove event received by i
  %-----------------------------

  consume_event(cal: calendar, i: IDENTITY): calendar =
     cal WITH .flag[i] := false;


  %-----------------------------------------------------
  % broadcast a message from i to all nodes except i
  %  - t is the transmission time
  % if there is already a message m0 being sent then
  % a collision occurs and is resolved as follows:
  %  - m0 remains the transmitted messages 
  %  - node i will not receive m0
  %  - message m is dropped
  %------------------------------------------------------

  bcast(cal: calendar, m: message, i: IDENTITY): calendar = 
    IF empty?(cal) THEN
	(# flag := [[j: IDENTITY] j /= i],
           content := m,
           origin := i,
           delivery := 1 #)
    ELSE cal WITH .flag[i] := false
    ENDIF;


  %-----------------------------------------------
  % time of the next event in the calendar
  % only meaningful if the calendar is not empty
  %-----------------------------------------------

  first_event(cal: calendar): NATURAL = cal.delivery;


  %---------------------------------------------------
  %  Clock module
  %  - input: timeout of each node + calendar
  %  - if the calendar is empty, the clock module
  %  advances time up to the smallest timeout
  %  - if a message is in the bus, time advances
  %  to the smallest timeout or to the bus delivery
  %  time, whichever is smaller
  %---------------------------------------------------

  time_can_advance(cal: calendar, time_out: TIMEOUT_ARRAY): BOOLEAN =
      IF empty?(cal) THEN 
          (FORALL (i: IDENTITY): time_out[i] > 0)
      ELSE 
          (FORALL (i: IDENTITY): time_out[i] > 0) AND first_event(cal) > 0
      ENDIF;


  recur_min(x: TIMEOUT_ARRAY, min_sofar: NATURAL, idx: [0 .. N]): NATURAL = 
      IF idx = 0 THEN min_sofar
      ELSE recur_min(x, min(min_sofar, x[idx]), idx-1)
      ENDIF;

  min(x: TIMEOUT_ARRAY): NATURAL = recur_min(x, x[N], N-1); 

  %update_timeouts_by_min_timeout(time_out: TIMEOUT_ARRAY): TIMEOUT_ARRAY = 
  %      [[i: IDENTITY] time_out[i] - min(time_out)]; 

  %is_next_event(cal: calendar, time_out: TIMEOUT_ARRAY, t: NATURAL): BOOLEAN =
  is_next_event(time_out: TIMEOUT_ARRAY, t: NATURAL): BOOLEAN =
      %IF empty?(cal) THEN 
                (FORALL (i: IDENTITY): t <= time_out[i]) 
            AND (EXISTS (i: IDENTITY): t = time_out[i]);
      %ELSE
      %          (FORALL (i: IDENTITY): t <= time_out[i])
      %      AND t <= first_event(cal)
      %      AND (t = first_event(cal) OR (EXISTS (i: IDENTITY): t = time_out[i]))
      %ENDIF;


  clock: MODULE =
    BEGIN
      GLOBAL time_out: TIMEOUT_ARRAY
      GLOBAL cal: calendar
      %LOCAL next_timeout: TIMEOUT_VALUE
      %LOCAL next_timeout_flag: BOOLEAN

   INITIALIZATION
      %(FORALL(i:IDENTITY): time_out[i] IN {x: TIMEOUT_VALUE | x > 0 AND x <= max_init_time});
      cal = empty_cal;
      %next_timeout = 0;
      %next_timeout_flag = false;
      
    TRANSITION
      [ time_elapses:
         time_can_advance(cal, time_out) AND empty?(cal) --> %AND next_timeout_flag = false --> 
             %next_timeout' IN { t: TIMEOUT_VALUE |is_next_event(time_out, t)};
             %next_timeout_flag' = true;
	     %time_out' = [[i: IDENTITY] (time_out[i] - next_timeout')]; 
	     time_out' = [[i: IDENTITY] (time_out[i] - min(time_out))]; 

      [] time_elapses_2:
        time_can_advance(cal, time_out) AND NOT empty?(cal) AND FORALL (i: IDENTITY): first_event(cal) <= time_out[i] -->
             time_out' = [[i: IDENTITY] time_out[i] - first_event(cal)];
             cal' = cal WITH .delivery := 0

      [] time_elapses_3:
        time_can_advance(cal, time_out) AND NOT empty?(cal) AND EXISTS (i: IDENTITY): first_event(cal) > time_out[i] -->
             %next_timeout' IN { t: TIMEOUT_VALUE |is_next_event(time_out, t)};
             %time_out' = [[i: IDENTITY] time_out[i] - next_timeout']; 
             %cal' = cal WITH .delivery := cal.delivery - next_timeout';
             time_out' = [[i: IDENTITY] time_out[i] - min(time_out)]; 
             cal' = cal WITH .delivery := cal.delivery - min(time_out);
      ]		
    END;





  %------------------------
  % Next slot after slot i
  %------------------------

  inc(i: IDENTITY): IDENTITY = IF i=N THEN 1 ELSE i+1 ENDIF;


  %-------------------------------------------------
  % Number of slots between slot i and next slot j
  %     slot_delay(i, i + 1) = 0 if i<N
  %     slot_delay(N, 1) = 0
  %     slot_delay(i, i) = N-1
  %-------------------------------------------------

  slot_delay(i, j: IDENTITY): [0 .. N-1]  =
     IF i < j THEN j - i - 1 ELSE N - i + j - 1 ENDIF;



  %-----------------------------------
  %  States of a node during startup
  %-----------------------------------

  PC: TYPE = { init, listen, coldstart, active };


  %-------------------
  %  Node[i] process
  %-------------------

  node[i: IDENTITY]: MODULE = 
    BEGIN
      GLOBAL time_out: TIMEOUT_ARRAY 
      GLOBAL cal: calendar
      OUTPUT pc: PC             % to be read by the abstraction module
      OUTPUT slot: IDENTITY     % slot and pc need to be output
   INITIALIZATION
      pc = init;
      slot = i;
      (FORALL(i:IDENTITY): time_out[i] IN {x: TIMEOUT_VALUE | x > 0 AND x <= max_init_time});
   TRANSITION
      [ init_to_listen:
	pc = init AND time_out[i] = 0 --> 
           pc' = listen;
           time_out'[i] = tau_listen(i)

     % reception of a frame in the init state ==> drop it
     [] frame_in_init:
        pc = init AND event_pending?(cal, i) AND event_time(cal, i) = 0 -->
           cal' = consume_event(cal, i)

     % end of listen phase: send cs frame, move to coldstart state
     % bcast function takes care of collisions
     [] listen_to_coldstart:
        pc = listen AND time_out[i] = 0 -->
           pc' = coldstart;
	   time_out'[i] = tau_coldstart(i);
	   cal' = bcast(cal, cs_frame, i)

     % reception of a cs_frame in the listen state:
     % move to coldstart and set timeout
     [] cs_frame_in_listen: 
        pc = listen AND cs_frame_pending?(cal, i) AND event_time(cal, i) = 0 -->
           pc' = coldstart;
           time_out'[i] = tau_coldstart(i) - propagation;
	   cal' = consume_event(cal, i)    

     % for reception of an i_frame in the listen state: see below

     % reception of a cs_frame in the coldstart state:
     % synchronize on the sender and move to active state
     [] cs_frame_in_coldstart:
        pc = coldstart AND cs_frame_pending?(cal, i) AND event_time(cal, i) = 0 -->
           pc' = active;
	   time_out'[i] = slot_time - propagation;
           slot' = frame_origin(cal, i);
           cal' = consume_event(cal, i)

     % end of coldstart phase (timeout tau_coldstart(i) is reached)
     % broadcast a cs_frame and loop back to coldstart state
     % --> TO DO: check if it's OK to go directly to active from here
     [] coldstart_to_coldstart:
        pc = coldstart AND time_out[i] = 0 -->
           % pc' = coldstart;
	   time_out'[i] = tau_coldstart(i);
	   cal' = bcast(cal, cs_frame, i)
 
     % reception of an i_frame in listen or coldstart state: synchronize and move
     % to the active state
     [] i_frame_processed:
        (pc = listen OR pc = coldstart) AND i_frame_pending?(cal, i) AND 
              event_time(cal, i) = 0 -->
           pc' = active;
           time_out'[i] = slot_time - propagation;
           slot' = frame_origin(cal, i);
           cal' = consume_event(cal, i)


     % active state: end of current slot, new slot /= i
     [] passive_slot:
        pc = active AND time_out[i] = 0 AND inc(slot) /= i -->
           time_out'[i] = slot_time;
	   slot' = inc(slot)

     % active state: end of current slot, new slot = i
     % broadcast an i_frame
     [] active_slot:
        pc = active AND time_out[i] = 0 AND inc(slot) = i -->
           time_out'[i] = slot_time;
	   slot' = inc(slot);
           cal' = bcast(cal, i_frame, i)

     % reception of an i_frame
     % in active state: just consume the event. No action
     [] i_frame_ignored:
        pc = active AND i_frame_pending?(cal, i) AND event_time(cal, i) = 0 -->
            cal' = consume_event(cal, i)

      ]
    END;


   %----------------------------------------------------
   %  Asynchronous composition: all processes together
   %    time_out[i] = timeout variable of process[i]
   %----------------------------------------------------

   nodes: MODULE = 
     %WITH GLOBAL time_out: TIMEOUT_ARRAY,
     WITH OUTPUT pc: ARRAY IDENTITY OF PC,
                 slot: ARRAY IDENTITY OF IDENTITY
        ([] (i: IDENTITY): (RENAME 
                                   pc TO pc[i], slot TO slot[i] IN node[i]));
    
   tta: MODULE = clock [] nodes;


   %--------------
   %  Properties
   %--------------

   %system: MODULE = tta || abstractor || monitor;

   %
   % time_aux0 to time_aux2 are provable by induction at depth 1
   % time_aux3 is provable by induction at depth 4, or by induction
   %   at depth 1 using time_aux0 as a lemma
   %

   %time_aux0: LEMMA
     %system |- G(time >= 0);

   time_aux1: LEMMA
     tta |- G(FORALL (i: IDENTITY): time_out[i] >= 0);

   time_aux2: LEMMA
     tta |- G(empty?(cal) OR first_event(cal) >= 0);

   %time_aux3: LEMMA
     %system |- G(FORALL (i: IDENTITY): time_out[i] > 0);


   %
   % delivery_delay: all by induction at depth 1
   %

   %delivery_delay: LEMMA
     %tta |- G(empty?(cal) OR first_event(cal) <= cal.send + propagation);

   delivery_delay1: LEMMA
     tta |- 
	G(FORALL (i: IDENTITY): event_pending?(cal, i) => event_time(cal, i) <= propagation);

   %delivery_delay2: LEMMA
     %system |- 
	%G(FORALL (i: IDENTITY): i_frame_pending?(cal, i) => event_time(cal, i) <= cal.send + propagation);

   %delivery_delay3: LEMMA
     %system |- 
	%G(FORALL (i: IDENTITY): cs_frame_pending?(cal, i) => event_time(cal, i) <= cal.send + propagation);


   %
   % a sender does not receive its own frame: by induction at depth 1
   % 

   %calendar_aux1: LEMMA
     %system |- G(NOT event_pending?(cal, cal.origin));

  liveness: LEMMA
     %tta |- G(EXISTS(i: IDENTITY): (pc[i] = listen) => false);
     tta |- F(FORALL(i: IDENTITY): G(pc[i] = active));


   %
   %  Safety property
   %

   synchro: THEOREM
     tta |- G(FORALL (i, j: IDENTITY): pc[i] = active AND pc[j] = active AND
     		time_out[i] > 0 AND time_out[j] > 0 => time_out[i] = time_out[j] AND slot[i] = slot[j]);
     %tta |- G(FORALL (i, j: IDENTITY): pc[i] = active AND pc[j] = active => false); 
		


 
END
